{"ast":null,"code":"import { redirect } from \"react-router-dom\";\nexport function getTokenDuration() {\n  const storedExpirationDate = localStorage.getItem('expiration');\n  const expirationDate = new Date(storedExpirationDate);\n  const now = new Date();\n  const duration = expirationDate.getTime() - now.getTime();\n  return duration;\n}\nexport function getAuthToken() {\n  const token = localStorage.getItem('token');\n  if (!token) {\n    return null;\n  }\n  const tokenDuration = getTokenDuration();\n  if (tokenDuration < 0) {\n    return 'EXPIRED';\n  }\n  return token;\n}\nexport function loader() {\n  return getAuthToken();\n}\nexport function checkAuthLoader() {\n  const token = getAuthToken();\n  if (!token) {\n    return redirect('/auth'); // prevent the user accessing the certain pages without token, and add it to all routes that need protection \n  }\n\n  return null;\n}","map":{"version":3,"names":["redirect","getTokenDuration","storedExpirationDate","localStorage","getItem","expirationDate","Date","now","duration","getTime","getAuthToken","token","tokenDuration","loader","checkAuthLoader"],"sources":["C:/Users/MD250709/OneDrive - NCR Corporation/Desktop/react-authentication/frontend/src/util/auth.js"],"sourcesContent":["import { redirect } from \"react-router-dom\";\r\n\r\nexport function getTokenDuration(){\r\n   const storedExpirationDate = localStorage.getItem('expiration');\r\n\r\n   const expirationDate = new Date(storedExpirationDate);\r\n\r\n   const now = new Date();\r\n   const duration = expirationDate.getTime() - now.getTime();\r\n\r\n   return duration;\r\n}\r\n\r\nexport function getAuthToken(){\r\n   const token = localStorage.getItem('token');\r\n\r\n   if(!token){\r\n      return null;\r\n   }\r\n\r\n   const tokenDuration = getTokenDuration();\r\n\r\n   if(tokenDuration < 0){\r\n      return 'EXPIRED';\r\n   }\r\n\r\n   return token;\r\n}\r\n\r\nexport function loader() {\r\n\r\n   return getAuthToken();\r\n}\r\n\r\nexport function checkAuthLoader(){\r\n\r\n   const token = getAuthToken();\r\n\r\n\r\n   if(!token){\r\n      return redirect('/auth') // prevent the user accessing the certain pages without token, and add it to all routes that need protection \r\n   }\r\n\r\n   return null;\r\n}"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,kBAAkB;AAE3C,OAAO,SAASC,gBAAgBA,CAAA,EAAE;EAC/B,MAAMC,oBAAoB,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;EAE/D,MAAMC,cAAc,GAAG,IAAIC,IAAI,CAACJ,oBAAoB,CAAC;EAErD,MAAMK,GAAG,GAAG,IAAID,IAAI,CAAC,CAAC;EACtB,MAAME,QAAQ,GAAGH,cAAc,CAACI,OAAO,CAAC,CAAC,GAAGF,GAAG,CAACE,OAAO,CAAC,CAAC;EAEzD,OAAOD,QAAQ;AAClB;AAEA,OAAO,SAASE,YAAYA,CAAA,EAAE;EAC3B,MAAMC,KAAK,GAAGR,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAE3C,IAAG,CAACO,KAAK,EAAC;IACP,OAAO,IAAI;EACd;EAEA,MAAMC,aAAa,GAAGX,gBAAgB,CAAC,CAAC;EAExC,IAAGW,aAAa,GAAG,CAAC,EAAC;IAClB,OAAO,SAAS;EACnB;EAEA,OAAOD,KAAK;AACf;AAEA,OAAO,SAASE,MAAMA,CAAA,EAAG;EAEtB,OAAOH,YAAY,CAAC,CAAC;AACxB;AAEA,OAAO,SAASI,eAAeA,CAAA,EAAE;EAE9B,MAAMH,KAAK,GAAGD,YAAY,CAAC,CAAC;EAG5B,IAAG,CAACC,KAAK,EAAC;IACP,OAAOX,QAAQ,CAAC,OAAO,CAAC,EAAC;EAC5B;;EAEA,OAAO,IAAI;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}